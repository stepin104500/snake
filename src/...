#include <snake&ladder.h>
int getchar()
{
	//  int8_t* get_address = (int*) 0x11200;
	//  int8_t value = 0;

	//   while(value==0){
	//    value = *get_address;
	//    value = value & 0x1;
	//   }

	register char a0 asm("a0");
	asm volatile ("li t1, 0x11200" "\n\t" //The base address of UART config registers
			"uart_statusr: lb t2, 40(t1)" "\n\t"
			"andi t2, t2, 0x1" "\n\t"
			"beqz t2, uart_statusr" "\n\t"
			"lb a0, 0(t1)"  "\n\t"      //The base address of UART data register
			:
			:
			:"a0","t1","t2","cc","memory");

	return a0;
}

void display_square(int position)
{
	int i,j=0;
	char a[80]={'\32'};


	for(j=0;j<80;j++)
	{
		a[j]=0x20;
		//      	printf(" %c ",a[i]);
	}

	//char a[80]={'$'};

	a[position]=0x24;


	i = 63;
	printf("\n_________________________________________________________________________________\n");
	printf("||        ||S       ||       ||        ||        ||        ||        ||        ||\n");
	printf("||   %c    ||   %c    ||   %c   ||   %c    ||    %c   ||    %c   ||    %c   ||    %c   ||\n",a[i],a[i-1],a[i-2],a[i-3],a[i -4],a[i-5],a[i-6],a[i-7]); 	
	printf("||%d      ||%d      ||%d     ||%d      ||%d      ||%d      ||%d      ||%d      ||\n",i,i-1,i-2,i-3,i -4,i-5,i-6,i-7);
	printf("||________||________||_______||________||________||________||________||________||\n");

	i=55;                                                                                  
	printf("_________________________________________________________________________________\n");
	printf("||S       ||        ||       ||        ||        ||        ||        ||        ||\n");
	printf("||   %c    ||   %c    ||   %c   ||   %c    ||    %c   ||    %c   ||    %c   ||    %c   ||\n",a[i-7],a[i-6],a[i-5],a[i-4],a[i -3],a[i-2],a[i-1],a[i]); 	
	printf("||%d      ||%d      ||%d     ||%d      ||%d      ||%d      ||%d      ||%d      ||\n",i-7,i-6,i-5,i-4,i-3,i-2,i-1,i);
	printf("||________||________||_______||________||________||________||________||________||\n");

	i = 47;

	printf("_________________________________________________________________________________\n");
	printf("||        ||        ||      L||        ||        ||        ||       S||        ||\n");
	printf("||   %c    ||   %c    ||   %c   ||   %c    ||    %c   ||    %c   ||    %c   ||    %c   ||\n",a[i],a[i-1],a[i-2],a[i-3],a[i -4],a[i-5],a[i-6],a[i-7]); 	
	printf("||%d      ||%d      ||%d     ||%d      ||%d      ||%d      ||%d      ||%d      ||\n",i,i-1,i-2,i-3,i -4,i-5,i-6,i-7);
	printf("||________||________||_______||________||________||________||________||________||\n");
	i = 39;

	printf("_________________________________________________________________________________\n");
	printf("||        ||S       ||       ||        ||        ||        ||        ||        ||\n");
	printf("||   %c    ||   %c    ||   %c   ||   %c    ||    %c   ||    %c   ||    %c   ||    %c   ||\n",a[i-7],a[i-6],a[i-5],a[i-4],a[i -3],a[i-2],a[i-1],a[i]); 	
	printf("||%d      ||%d      ||%d     ||%d      ||%d      ||%d      ||%d      ||%d      ||\n",i-7,i-6,i-5,i-4,i-3,i-2,i-1,i);
	printf("||________||________||_______||________||________||________||________||________||\n");
	i = 31;

	printf("_________________________________________________________________________________\n");
	printf("||        ||        ||       ||        ||        ||       L||        ||        ||\n");
	printf("||   %c    ||   %c    ||   %c   ||   %c    ||    %c   ||    %c   ||    %c   ||    %c   ||\n",a[i],a[i-1],a[i-2],a[i-3],a[i -4],a[i-5],a[i-6],a[i-7]); 	
	printf("||%d      ||%d      ||%d     ||%d      ||%d      ||%d      ||%d      ||%d      ||\n",i,i-1,i-2,i-3,i -4,i-5,i-6,i-7);
	printf("||________||________||_______||________||________||________||________||________||\n");
	i = 23;

	printf("_________________________________________________________________________________\n");
	printf("||S        ||        ||       ||        ||S        ||        ||        ||       L||\n");
	printf("||   %c    ||   %c    ||   %c   ||   %c    ||    %c   ||    %c   ||    %c   ||    %c   ||\n",a[i-7],a[i-6],a[i-5],a[i-4],a[i -3],a[i-2],a[i-1],a[i]); 	
	printf("||%d      ||%d      ||%d     ||%d      ||%d      ||%d      ||%d      ||%d      ||\n",i-7,i-6,i-5,i-4,i-3,i-2,i-1,i);
	printf("||________||________||_______||________||________||________||________||________||\n");
	i = 15;

	printf("_________________________________________________________________________________\n");
	printf("||        ||        ||      L||        ||        ||        ||        ||       S||\n");
	printf("||   %c    ||   %c    ||   %c   ||   %c    ||    %c   ||    %c   ||    %c   ||    %c   ||\n",a[i],a[i-1],a[i-2],a[i-3],a[i -4],a[i-5],a[i-6],a[i-7]); 	
	printf("||%d      ||%d      ||%d     ||%d      ||%d      ||%d      ||%d       ||%d       ||\n",i,i-1,i-2,i-3,i -4,i-5,i-6,i-7);
	printf("||________||________||_______||________||________||________||________||________||\n");
	i = 7;
	printf(" ______________________________________________________________________________\n");
	printf("||        ||        ||       ||       L||        ||        ||       L||        ||\n");
	printf("||   %c    ||   %c    ||   %c   ||   %c    ||    %c   ||    %c   ||    %c   ||    %c   ||\n",a[i-7],a[i-6],a[i-5],a[i-4],a[i -3],a[i-2],a[i-1],a[i]); 	
	printf("||%d       ||%d       ||%d      ||%d       ||%d       ||%d        ||%d      ||%d       ||\n",i-7,i-6,i-5,i-4,i-3,i-2,i-1,i);
	printf("||________||________||_______||________||________||________||________||________||");

	a[position]=0x20;
}

checkposition()
{    
	switch(position)
	{
		case 4:
			return newposition = 35;
			break;

		case 7:
			return newposition = 23;
			break;

		case 9:
			return newposition =5;
			break;

		case 14:
			return newposition =43;
			break;

		case 17:
			return newposition =13;
			break;

		case 21:
			return newposition =3;
			break;

		case 24:
			return newposition =58;
			break;

		case 27:
			return newposition =37;
			break;

		case 34:
			return newposition =20;
			break;

		case 42:
			return newposition =11;
			break;

		case 46:
			return newposition =53;
			break;

		case 49:
			return newposition =32;
			break;

		case 63:
			return newposition =2;
			break;

		default:
			return newposition = position;
	}


}

